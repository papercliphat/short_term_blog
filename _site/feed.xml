<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Porter</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Aug 2017 18:15:17 -0700</pubDate>
    <lastBuildDate>Mon, 21 Aug 2017 18:15:17 -0700</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Adjacency Tree Rails</title>
        <description>
&lt;hr /&gt;

&lt;p&gt;Trees are a great way to organize your data logically and allow for user browsing! The heirarchy is so simple, logical, and useful that we see tree structures all over websites today. Comments, products, pictures, and even our folders are tree structures. I’m going to walk through the different trees, include their pros and cons, and implement them all with the same dataset. The trees will include an Adjacency List, Nested Sets, Path Enumeration, and a Closure table. All these trees have gems, I will start with the gem, then in the next installment give a more detailed walk through.&lt;/p&gt;

&lt;p&gt;Even&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jun 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/06/20/adjacency-list-tree/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/20/adjacency-list-tree/</guid>
        
        <category>Rails</category>
        
        <category>Tree</category>
        
        
        <category>Tree</category>
        
      </item>
    
      <item>
        <title>Tree Structures in Ror</title>
        <description>
&lt;p&gt;Types of tree structures&lt;/p&gt;

&lt;p&gt;gems to solve them&lt;/p&gt;

&lt;p&gt;implementation of those gems&lt;/p&gt;

&lt;p&gt;Split the 4-5 types of trees into different groups&lt;/p&gt;

&lt;p&gt;Another idea is a write up on security&lt;/p&gt;

&lt;p&gt;Write on how to avoid x security measure&lt;/p&gt;

&lt;p&gt;cross site scripting&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/05/22/tree-structures-in-ror/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/22/tree-structures-in-ror/</guid>
        
        <category>Instruction</category>
        
        <category>Trees</category>
        
        <category>RoR</category>
        
        
        <category>Ruby</category>
        
      </item>
    
      <item>
        <title>Hosting Jekyll on AWS</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#choosing-your-domain-name&quot; id=&quot;markdown-toc-choosing-your-domain-name&quot;&gt;Choosing Your Domain Name&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-your-domain-name-with-another-host&quot; id=&quot;markdown-toc-using-your-domain-name-with-another-host&quot;&gt;Using Your Domain Name with Another Host&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-s3_website-to-host&quot; id=&quot;markdown-toc-using-s3_website-to-host&quot;&gt;Using S3_website to Host&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#set-up-s3-buckets&quot; id=&quot;markdown-toc-set-up-s3-buckets&quot;&gt;Set Up S3 Buckets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-s3_website-gem&quot; id=&quot;markdown-toc-using-s3_website-gem&quot;&gt;Using s3_website gem&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have a jekyll blog ready, and want to host it, Amazon Web Services (AWS) is one of the best tools to use. The first year is mostly free, I am paying 56 cents a month now. It is reliable. They guarantee 99.9% uptime, you only pay for what you use and it scales very well.&lt;/p&gt;

&lt;h4 id=&quot;choosing-your-domain-name&quot;&gt;Choosing Your Domain Name&lt;/h4&gt;

&lt;p&gt;Choosing your domain name is a difficult process. It will require creativity and a good understanding of what “types” of names are still available. A lot of names have been taken and just held onto hoping for a time when someone will pay five figures or more. I recommend checking &lt;a href=&quot;www.panabee.com&quot;&gt;Panabee&lt;/a&gt; for some help brainstorming. They mix and match your name ideas and can help you step in the right direction.&lt;/p&gt;

&lt;p&gt;While choosing a great name is difficult, registering a name is incredibly easy. Some domain registrar companies even offer $.99 for your first domain name. SA few big DNRs are GoDaddy, Namecheap, Amazon Web Services and Google Domains.&lt;/p&gt;

&lt;p&gt;These DNRs also provide hosting services. It is easy to host on their service, but AWS and Google Domains have the cheapest and easiest hosting to upgrade. AWS and Google Domains both charge about $12 for registration, while GoDaddy and NameCheap charge anywhere from $.99 to $11.99.&lt;/p&gt;

&lt;p&gt;It should also be noted that GoDaddy has a reptuation for trying to upsell services. You will often get emails advertising 20% off your next registration and discounts they are offering. They also aren’t the best about maintaining security, and are somewhat susceptable to social hacking.&lt;/p&gt;

&lt;p&gt;Namecheap used to be much cheaper than GoDaddy, with regard to hosting, but they are now about on par in terms of cost. Namecheap does not send you nearly as much in terms of email advertisements though.&lt;/p&gt;

&lt;h6 id=&quot;using-your-domain-name-with-another-host&quot;&gt;Using Your Domain Name with Another Host&lt;/h6&gt;

&lt;p&gt;If you want to host with AWS, but chose a different DNR, you have to set up a nameserver change. This is fairly simple, but the exact process is slightly different for each DNR.&lt;/p&gt;

&lt;p&gt;To start create an account with &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS&lt;/a&gt;. You start with a mostly free year. We are then going to &lt;a href=&quot;https://console.aws.amazon.com/route53&quot;&gt;Route 53&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can spend some time exploring the area, but Route 53 is a Domain Name System. We’re going to create a hosted zone. When we create a hosted zone we get 4 values of type NS (name server). These are our domain name servers that we are going to tell our doman name registrar to use.&lt;/p&gt;

&lt;p&gt;This part is a also fairly simple, but different for each DNR. You need to find your nameservers for your domain name. You should go to a page that lists your registered domain names. Then you need to find a settings button that opens up settings for that particular domain name. There should be an option for nameservers, you are going to want to add custom name servers and put in the 4 values of type NS that we got when we created a hosted zone.&lt;/p&gt;

&lt;p&gt;For GoDaddy you need to migrate to My products, then in domains click manage, then there is a gear pull down for each domain. We are going to use that to navigate to Manage DNS. Here we chage our nameservers to custom and include our 4 from route 53.&lt;/p&gt;

&lt;h4 id=&quot;using-s3_website-to-host&quot;&gt;Using S3_website to Host&lt;/h4&gt;

&lt;h6 id=&quot;set-up-s3-buckets&quot;&gt;Set Up S3 Buckets&lt;/h6&gt;

&lt;p&gt;The first step to getting hosted is setting up an S3 AWS bucket. From route 53 click services in the header and migrate to S3. Today it is in the right most column, but I have heard they are revamping it soon.&lt;/p&gt;

&lt;p&gt;The S3 setup for AWS is also &lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&quot;&gt;here&lt;/a&gt; if you want to look at an alternative solution sources.&lt;/p&gt;

&lt;p&gt;We will want to create two buckets. We don’t need logging, but you could if you want to log your visitors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;example.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;www.example.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to host our data on one, and use the other to redirect. This way if someone types www.example.com, they automatically get forwarded to example.com. Use your domain registrar name so you do not have to do this twice. We are going to host our data on example.com.&lt;/p&gt;

&lt;p&gt;The buckets we need a permissions policy so everyone can read them. We can edit ours by clicking on our example.com bucket, clicking properties on the right hand side and selecting permissions. A window with Grantee and your username should come up. Below that we are going to click edit bucket policy and add:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PublicReadForGetBucketObjects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;AWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::example.com/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just like before replace example.com with your domain name.&lt;/p&gt;

&lt;h6 id=&quot;using-s3_website-gem&quot;&gt;Using s3_website gem&lt;/h6&gt;

&lt;p&gt;The instructions linked to above from amazon are cumbersome. There are a lot of steps to set up a static website, that we can avoid by using &lt;a href=&quot;https://github.com/laurilehmijoki/s3_website&quot;&gt;s3_website gem&lt;/a&gt;! First we need to install the gem&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem install s3_website&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go ahead and run the gem&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;s3_website cfg create&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This creates s3_website.yml which stores our access keys and configuration options.&lt;/p&gt;

&lt;p&gt;We need to head back to AWS S3 and get our secret keys. In the action bar under services, in the second column from the right is IAM, Identity and Access Management. We are going to generate some secret keys here so that our jekyll has permission to deploy to AWS.&lt;/p&gt;

&lt;p&gt;Move over to Users on the left hand side and Create New Users. Add a user name. After hitting create there is a link highlighted titled Show User Security Credentials. That has our access keys. Copy the access key id: and Secret Access Key: to somewhere secure.&lt;/p&gt;

&lt;p&gt;Open the s3_website.yml we made a few minutes ago and input&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s3_id: access key
s3_secret: secret key
s3_bucket: example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re all done with set up.&lt;/p&gt;

&lt;p&gt;Finish up with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and deploy with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;s3_website push&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/07/09/hosting-jekyll-on-aws/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/09/hosting-jekyll-on-aws/</guid>
        
        <category>Jekyll</category>
        
        <category>AWS</category>
        
        
        <category>Hosting</category>
        
      </item>
    
      <item>
        <title>Seeding a Database</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#how-seeding-works&quot; id=&quot;markdown-toc-how-seeding-works&quot;&gt;How Seeding Works&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#faker&quot; id=&quot;markdown-toc-faker&quot;&gt;Faker&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fixtures&quot; id=&quot;markdown-toc-fixtures&quot;&gt;Fixtures&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted to make a series of posts detailing various types of tree structures to organize data logically, but thought it would be too early without an explanation on seeding your database. Seeding a database is a basic tool we can use to add data to a database. It would be nuts to build an application without seeing where data goes and how it fits. Gems like faker are great tools to populate data automatically. I will also go into a bit about fixtures and the rake command.&lt;/p&gt;

&lt;h4 id=&quot;how-seeding-works&quot;&gt;How Seeding Works&lt;/h4&gt;

&lt;p&gt;Seeding a database is a piece of cake. Just open up &lt;code class=&quot;highlighter-rouge&quot;&gt;db/seeds.rb&lt;/code&gt; and treat it like a normal ruby program in the rails environment. I am going to use a tree to organize some phylogenetic biology data. If you do not remember, those are the trees used to organize living things. So for an amoeba, which is that funky blog like micro-organism we would have:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eukaryota &amp;gt; Amoebozoa &amp;gt; Tubulinea &amp;gt; Loboda &amp;gt; Tubulinda &amp;gt; Amoebidae &amp;gt; Amoeba &amp;gt; Proteus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is complex, and hard for us to read, so I will just make up some simple data that goes one or two levels down. We’ll have a broad category of Animals, Plants and Micro-organisms. Animals will be subdivided into Reptiles, Birds and Fish. Plants will be subdivided Flowering and Non-flowering, and Micro-organisms won’t have any subdivisions at all. How you organize this data is the subject of the tree structure series, but we do have a bunch of names. So let’s seed a database of names.&lt;/p&gt;

&lt;p&gt;First we need to generate our model in Rails&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ rails g model Tree name:string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ rake db:migrate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we add some data!&lt;/p&gt;

&lt;p&gt;db/seeds.rb&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tree_list = [

  &quot;Animals&quot;,
  &quot;Plants&quot;,
  &quot;Micro-organisms&quot;,
  &quot;Reptiles&quot;,
  &quot;Birds&quot;,
  &quot;Fish&quot;,
  &quot;Gecko&quot;,
  &quot;Alligator&quot;,
  &quot;Iguana&quot;,
  &quot;Chicken&quot;,
  &quot;Blue Jay&quot;,
  &quot;Shark&quot;,
  &quot;Tuna&quot;,
  &quot;Dog Fish&quot;,
  &quot;Catfish&quot;,
  &quot;Amoeba&quot;,
  &quot;Algae&quot;,
  &quot;Phytoplankton&quot;,
  ]

tree_list.each do |phylum|
  Tree.create( name: phylum )
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we seed the db with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ rails db:seed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pretty simple, all we’re doing is writing out some strings, and throwing them in a dot each do. But this took me a few mintues. I could not think of these all quickly, and did not want funky data. Like where would Whales go? I did not leave room for those. Micro-organisms was also Bacteria, until I realized I did not know any bacteria off the top of my head.&lt;/p&gt;

&lt;h6 id=&quot;faker&quot;&gt;Faker&lt;/h6&gt;

&lt;p&gt;In many common instances should save ourself some trouble and use Faker. We cannot get the same logic we could in our made up data, but we can create all sorts of things like addresses, names and universities.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ gem install faker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ bundle install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open up db/seeds.rb&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;99.times do |n|
  name  = Faker::Name.name
  Tree.create!(name:  name)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;fixtures&quot;&gt;Fixtures&lt;/h6&gt;

&lt;p&gt;While we are on the subject of creating dummy data, fixtures are used to create dummy data for testing. One of the more prominent gems is factory_girl_rails.&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/07/07/seeding-a-database/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/07/seeding-a-database/</guid>
        
        <category>Instruction</category>
        
        <category>Seeding</category>
        
        <category>Rails</category>
        
        
        <category>OpenCourseWare</category>
        
      </item>
    
      <item>
        <title>Beginning Self-Instructed CS</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-tool-you-need&quot; id=&quot;markdown-toc-the-tool-you-need&quot;&gt;The Tool You Need&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cs50-at-harvard&quot; id=&quot;markdown-toc-cs50-at-harvard&quot;&gt;CS50 at Harvard.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#algorithms&quot; id=&quot;markdown-toc-algorithms&quot;&gt;Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web-app-development&quot; id=&quot;markdown-toc-web-app-development&quot;&gt;Web App Development&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rubyror-online-resources&quot; id=&quot;markdown-toc-rubyror-online-resources&quot;&gt;Ruby/RoR online resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-something&quot; id=&quot;markdown-toc-build-something&quot;&gt;Build Something!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Teaching yourself how to code is hard. It takes a good deal of effort, focus and time, but if you have got those resources, you can get it done! There are plenty of skilled computer programmers today who did not go to college to learn to code. A of these folks had other cards up their sleves, like computers at home and had been working with computer code since middle or high school. For the most part, they had some serious resources, but today, those resources are more widely available, you just need to know how to find them.&lt;/p&gt;

&lt;h4 id=&quot;the-tool-you-need&quot;&gt;The Tool You Need&lt;/h4&gt;

&lt;p&gt;Today, for ~$200-400 USD you can get a pretty good programming computer. I recommend looking for pre-built laptops with ~4 gigs of Ram and ~2.4GHz processing speed. I would not feel comfortable going below this. You could, and people work with less, but this is where I feel comfortable making a recommendation.&lt;/p&gt;

&lt;h4 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h4&gt;

&lt;p&gt;There are two easier ways to learn to code. Free open courses, and doing several tutorials.&lt;/p&gt;

&lt;p&gt;Lots of top institutions including &lt;a href=&quot;https://www.extension.harvard.edu/academics/online-campus-courses&quot;&gt;Harvard&lt;/a&gt;, &lt;a href=&quot;ocw.mit.edu/index.htm&quot;&gt;MIT&lt;/a&gt;, &lt;a href=&quot;oyc.yale.edu/courses&quot;&gt;Yale&lt;/a&gt; and &lt;a href=&quot;online.stanford.ecu/courses&quot;&gt;Stanford&lt;/a&gt; have free open online courses, often called OpenCourseware. You don’t get the personalized mentorship, tutoring, a TA, or even the office hours, but you get the material and if you can commit it to memory and study effectively, you can do it. It’s full press all knowledge.&lt;/p&gt;

&lt;p&gt;Full disclosure: You need to go in with that get an A in the course effort.&lt;/p&gt;

&lt;p&gt;Running through tutorials is very much a hunt, find and assemble enough material situation. But there are plenty of resources available online, and very many tutorials to fill up your noggin.&lt;/p&gt;

&lt;p&gt;This is how I began:&lt;/p&gt;

&lt;h4 id=&quot;cs50-at-harvard&quot;&gt;CS50 at Harvard.&lt;/h4&gt;

&lt;p&gt;This is the best course I have ever taken. The introduction to computer programming course, &lt;a href=&quot;https://cs50.harvard.edu/&quot;&gt;CS50&lt;/a&gt;, is eye opening. They teach you the basics very well, it's all set up in a nice package. There is a wealth of material including lectures and TA sections where they teach you everything you need to know. It also feels very supportive. They have worked hard to get the class online and working well. A lot of people worldwide are taking it and it has expanded to include Yale too. If you take it while the actual course is going on, you get a ton of addional educational resources too! But don't let that stop you from getting started now.&lt;/p&gt;

&lt;p&gt;CS50 mostly works in C/C++ with a bit of PHP/Javascript, but they cover the basics well and the concepts underlying web and phone app development.&lt;/p&gt;

&lt;p&gt;Additionally CS50 has step-by-step &lt;a href=&quot;https://manual.cs50.net/appliance/19/&quot;&gt;instructions&lt;/a&gt; on how to get a virtual machine up and running. This is particularly helpful because it can save you a ton of discouraging set-up time on day 1.&lt;/p&gt;

&lt;h4 id=&quot;algorithms&quot;&gt;Algorithms&lt;/h4&gt;

&lt;p&gt;If you want a software development position, you can increase your prospects with a course or two in algorithms. The prerequisites are a year of college &lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/&quot;&gt;Calculus&lt;/a&gt;. At the undergraduate level &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/index.htm?utm_source=OCWDept&amp;amp;utm_medium=CarouselSm&amp;amp;utm_campaign=FeaturedCourse&quot;&gt;Design and Analysis of Algorithms&lt;/a&gt; from 2015 is the MIT intro to algorithms course. They have others listed, but the name was changed. If you are particularly ambitious, try your hand at a more specialized algorithms course, where algorithms are applied, in Biology or Animation.&lt;/p&gt;

&lt;h4 id=&quot;web-app-development&quot;&gt;Web App Development&lt;/h4&gt;

&lt;p&gt;I wanted to learn web app development and Ruby on Rails in particular.&lt;/p&gt;

&lt;p&gt;There was a web dev course offered at Stanford called CS142 that taught RoR, which has since been updated to a MEAN stack. I explored it, but it only had lecture notes and projects. That’s enough to push through a course, but wasn’t as full as I hoped.&lt;/p&gt;

&lt;p&gt;Ruby on Rails is a web application framework built in Ruby. I pointed to the appropriate resources for installing &lt;a href=&quot;www.robosto.com/2016/05/23/how-to-create-a-jekyll-blog/#install-ruby&quot;&gt;Ruby&lt;/a&gt; in a previous Jekyll blog utilizing RVM. To add Ruby on Rails, open up the console and&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ mkdir myrailsapp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ cd myrailsapp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ rvm use ruby-2.3.1@myrailsapp –ruby-version –create&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ gem install rails&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ rails new .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ve now got a fresh rails installation.&lt;/p&gt;

&lt;h6 id=&quot;rubyror-online-resources&quot;&gt;Ruby/RoR online resources&lt;/h6&gt;

&lt;p&gt;If you want to learn how to use Ruby on your own there are quite a few resources. I would start with the free &lt;a href=&quot;tryruby.org&quot;&gt;Try Ruby&lt;/a&gt; Tutorial, then do the &lt;a href=&quot;railsforzombies.org&quot;&gt;Rails for Zombies&lt;/a&gt; tutorial. I would then start with Michael Hartl's &lt;a href=&quot;https://www.railstutorial.org/&quot;&gt;tutorial&lt;/a&gt;. Hartl does a great job exaplining the basics. To finish off the beginning stages I would now begin with the &lt;a href=&quot;guides.rubyonrails.org&quot;&gt;Ruby on Rails guides&lt;/a&gt;. When I was a novice programmer, I wish I had gone through the work in this order. Reading the Rails guides was a bit more than I was ready for before working through Hartl's tutorial, and having a bit of time to juice up some Ruby/RoR in Try Ruby and Zombies was of great help.&lt;/p&gt;

&lt;p&gt;(There are Rails web dev courses available, and Stanford has a course now focusing on a MEAN stack.)&lt;/p&gt;

&lt;h6 id=&quot;build-something&quot;&gt;Build Something!&lt;/h6&gt;

&lt;p&gt;The most important step after learning how to use a language is to build something yourself. You can build Amazon for Rocks or Pinterest for shoes. It doesn’t have to be practical, but you need to create something to hone your skills and plug in the gaps between the tutorials and what is practical. You’ll learn about cacheing, new Javascript frameworks like AngularJS and a ton of other important materials to really build something great.&lt;/p&gt;

&lt;p&gt;Today there is plenty of information regarding programming on the web. You can choose a language and take tutorials, but there are also bootcamps in every major city that teach you to code quickly and push you to work hard well. I have heard them scoffed at before, but I personally think they are a viable resource. If you study and learn the material, whether it’s from a course, tutorials or a bootcamp you have it. There is not much else to it.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/06/13/beginning-self-instructed-cs/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/13/beginning-self-instructed-cs/</guid>
        
        <category>Instruction</category>
        
        <category>Free</category>
        
        <category>OpenCourseWare</category>
        
        
        <category>OpenCourseWare</category>
        
      </item>
    
      <item>
        <title>How to Create a Jekyll Blog</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#install-ruby&quot; id=&quot;markdown-toc-install-ruby&quot;&gt;Install Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install-jekyll&quot; id=&quot;markdown-toc-install-jekyll&quot;&gt;Install Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-few-pointers&quot; id=&quot;markdown-toc-a-few-pointers&quot;&gt;A Few Pointers&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#caveats-of-concise-high-end-theme&quot; id=&quot;markdown-toc-caveats-of-concise-high-end-theme&quot;&gt;Caveats of Concise-high-end Theme&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#footnotes&quot; id=&quot;markdown-toc-footnotes&quot;&gt;Footnotes:&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is less than an expansive How To, and more of a let me point you exactly to the resources you need and explain why or how that resource is important. I'll throw in ways you can make an identical site to mine. If you've never built anything in Jekyll it's helpful to have a step-wise guide on how to proceed.&lt;/p&gt;

&lt;h4 id=&quot;install-ruby&quot;&gt;Install Ruby&lt;/h4&gt;

&lt;p&gt;The first step to building a Jekyll Blog is to install Ruby!&lt;/p&gt;

&lt;p&gt;Ruby has a some great step-by-step instructions at the &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby official site&lt;/a&gt;. Find your operating system and get started.&lt;/p&gt;

&lt;p&gt;Warning: Ruby runs best on Ubuntu(Linux) and Mac. I’ve played with it in Fedora(Linux) and it wasn’t as easy to install for me. It will install in windows, but there are some issues with running Ruby on Rails and… I think Javascript frameworks. I actually use a Windows PC with a virtual machine set up through VMware.&lt;/p&gt;

&lt;p&gt;I used RVM (Ruby Version Manager) to both manage and install Ruby. I've never actually needed to use a specific Ruby version, which is their touted feature, but it was the easiest way to install Ruby on my system. We can visit &lt;a href=&quot;https://rvm.io/rvm/install&quot;&gt;RVM’s official site&lt;/a&gt; for detailed instructions.&lt;/p&gt;

&lt;p&gt;For additional help do a google search - something like “install ruby windows 10” or “install ruby fedora”, but be ready to wrestle with set up technical issues.&lt;/p&gt;

&lt;h4 id=&quot;install-jekyll&quot;&gt;Install Jekyll&lt;/h4&gt;

&lt;p&gt;Jekyll installation is insanely quick once you get Ruby installed properly. With a quick trip to the &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Jekyll official site&lt;/a&gt; we can have an extensive installation guide.&lt;/p&gt;

&lt;p&gt;The quick installation is &lt;sup&gt;1&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ gem install Jekyll&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ jekyll new my-site&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ cd my-site&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;my-site$ jekyll serve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then go to http://localhost:4000 in your browser&lt;/p&gt;

&lt;p&gt;The Jekyll website has all the information you need to get started writing posts, additional pages, linking, etc., so it's a worthwhile read.&lt;/p&gt;

&lt;h4 id=&quot;a-few-pointers&quot;&gt;A Few Pointers&lt;/h4&gt;

&lt;p&gt;Out of the box Jekyll comes with a simple some HTML and CSS included. If you don't like the appearance or want additional features consider exploring Jekyll Themes or Jekyll Templates with a quick google search.&lt;/p&gt;

&lt;p&gt;I something from &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll theme&lt;/a&gt;, which is an aggregation site. I was a fan of both &lt;a href=&quot;http://jekyllthemes.org/themes/yellowblue/&quot;&gt;Yellow Blue&lt;/a&gt; and &lt;a href=&quot;http://jekyllthemes.org/themes/wiki-blog/&quot;&gt;WikiBlog&lt;/a&gt;. I wanted something with Categories and Tags included on the sidebar, and WikiBlog actually linked me to &lt;a href=&quot;https://github.com/Gaohaoyang/gaohaoyang.github.io&quot;&gt;Concise-high-end Theme&lt;/a&gt;. It's not in English, but I cleaned it up a little and removed some features to make it more to my liking. I have included a blank template in my &lt;a href=&quot;https://github.com/papercliphat/concise_theme_jekyll&quot;&gt;github&lt;/a&gt; for English speakers. But spend some time exploring on your own for ideas you can build on.&lt;/p&gt;

&lt;h5 id=&quot;caveats-of-concise-high-end-theme&quot;&gt;Caveats of Concise-high-end Theme&lt;/h5&gt;

&lt;p&gt;The Concise theme “tag” feature requires at least two pages with different tags or you will get a divide by 0 error.&lt;/p&gt;

&lt;p&gt;To utilize the excerpt of the full blog page, keep 4 empty rows between the excerpt and the main body of the content.&lt;/p&gt;

&lt;p&gt;You'll have to install the Jekyll pagination gem or you will get an error for that too! Instructions can be found on the &lt;a href=&quot;https://jekyllrb.com/docs/pagination/&quot;&gt;Jekyll site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pagination limits the number of posts that appear on a page. If you want to add comments, your best bet is disquis, which requires registration and was a bit too much hassle for me. If you want comments, a “disquis jekyll” google search will send you to a ton of videos and guides to assist.&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;The $ denotes using the terminal aka console to type this code. You’ll see it a lot while your programming, but for me on day 1, I didn’t understand it.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/06/06/how-to-create-a-jekyll-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/06/how-to-create-a-jekyll-blog/</guid>
        
        <category>Jekyll</category>
        
        <category>HowTo</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Benefits of Jekyll in Static Apps</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-pros&quot; id=&quot;markdown-toc-the-pros&quot;&gt;The Pros&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-cons&quot; id=&quot;markdown-toc-the-cons&quot;&gt;The Cons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-competition&quot; id=&quot;markdown-toc-the-competition&quot;&gt;The Competition&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#wordpress&quot; id=&quot;markdown-toc-wordpress&quot;&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#alternative-popular-static-site-generators&quot; id=&quot;markdown-toc-alternative-popular-static-site-generators&quot;&gt;Alternative Popular Static Site Generators&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#footnotes&quot; id=&quot;markdown-toc-footnotes&quot;&gt;Footnotes:&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll is a static site generator written in Ruby. That means you can use it for blogs, business websites and anything else you can imagine that mostly doesn't require a database. It takes dynamic content like templates and markdown and assembles that content into a static application. The assembled static application is what gets put on the web. Using this method we can take advantage of paradigms in programming&lt;sup&gt;1&lt;/sup&gt; to easily and rapidly make changes to our application.&lt;/p&gt;

&lt;h3 id=&quot;the-pros&quot;&gt;The Pros&lt;/h3&gt;

&lt;p&gt;Jekyll is pitched and touted as being very minimalistic and very efficient. It has only what you need to generate a basic static site. Everything else you have add via plugins. The benefits to this approach are that Jekyll is very fast, very secure and very cheap right out of the box&lt;sup&gt;2&lt;/sup&gt;. Additionally, because it's so simple, it's fairly easy to optimize code for speed and efficiency.&lt;/p&gt;

&lt;p&gt;If you need log-in, extensive commenting, photo hosting or hosting any type of data you should definitely move out of Jekyll and into a webapp framework that supports databases like Ruby on Rails, PHP, or Python to name a new.&lt;/p&gt;

&lt;h3 id=&quot;the-cons&quot;&gt;The Cons&lt;/h3&gt;

&lt;p&gt;I consider these inconveniences inherent in the type of framework Jekyll is, but with enough inconveniences, we get a bit unhappy.&lt;/p&gt;

&lt;p&gt;Photos and media have to be inserted manually. With some sites like Wordpress, there is a nice interface to easily add this kind of data. Jekyll doesn't have that, so if we've got a dozen photos per post, it might be a good idea to consider switching.&lt;/p&gt;

&lt;p&gt;SEO optimization generally has to be done manually. SEO optimization gets webapp pages hitting higher on unpaid search results. There are a lot of factors to take into consideration, but generally optimization relies on good keywords, inter-application cross-linking and easy social network sharing. There are some Jekyll plug ins that help, but I don't use them. For me, this is more of a personal body of work blog, and I don't think it would be an optimal use of my time.&lt;/p&gt;

&lt;p&gt;Jekyll only works on computers where you are “set-up”. So if you've got a laptop you do most of your work on, and a light weight underpowered mini-laptop for traveling, you would likely find it difficult to update or edit your website on the road.&lt;/p&gt;

&lt;h3 id=&quot;the-competition&quot;&gt;The Competition&lt;/h3&gt;

&lt;h4 id=&quot;wordpress&quot;&gt;Wordpress&lt;/h4&gt;

&lt;p&gt;Today, the biggest webapp framework is definitely Wordpress. A lot of folks knock it for it's resource use, but it's huge strength is in it's interface. Anyone can easily create a website on wordpress with virtually no programming knowledge. Additionally, the more difficult to do things like handling database log-ins and tarnsactions can be done with plugins. It's really easy to use and you can find a TON of sites that use Wordpress like The New York Times.&lt;/p&gt;

&lt;p&gt;Wordpress works out of a browser and it has a simple editing system, but it is slower. It's also more prone to crashes and MUST be continuously updated. Security holes in plugins are constantly being found and updated. Because of these security holes, and popularity there is also got a malware situation. Malware might get inserted into your site if you aren't constantly updating, and then you might run into anti-viruses programs warning users of your site, loss of users trust and possibly SEO de-optimization&lt;sup&gt;3&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 id=&quot;alternative-popular-static-site-generators&quot;&gt;Alternative Popular Static Site Generators&lt;/h4&gt;

&lt;p&gt;Middleman - Also built in Ruby, but smaller than Jekyll. Some major websites use Middleman and if it works for them it can work for us.&lt;/p&gt;

&lt;p&gt;Roots - Node.js based, built by Carrot which is a subsidiary of the Vice Media Group.&lt;/p&gt;

&lt;p&gt;Hugo - Written in GO. I've been hearing a lot of love for Hugo, but it might be because it's the new kid on the block.&lt;/p&gt;

&lt;p&gt;If you are having trouble choosing a Static Site Generator and don't don't have any coding experience I'd just pick Jekyll or Wordpress. It's more important to get started and work through the fundamentals, than spending significant time researching for very small gains. The larger frameworks also have more tutorials, guides, plug-ins and overall resources at your disposal.&lt;/p&gt;

&lt;p&gt;If you do have skill in Node.js, GO or another language you should definitely use the static site generator in that language. With a quick google search you can find a framework that supports your language of choice. Additionally, you shouldn't have any trouble finding tutorials to get you started.&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Paradigms include things like DRY - Don't repeat yourself. If you are repeating yourself over several sections, and you decide to make a change, you now have to make this change over several sections. This is both error prone (typos) and time consuming.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Becuase we have no communication between databases we are fast. We are just pulling up already prepared data quickly. Jekyll comes out of the box without plugins, which may be a source of continuous updating to patch security holes. Additionally, because Jekyll is already prepared when it's hosted, there isn't much to change. It's often the ability to be dynamic that presents security holes. With no databse, Jekyll is small and light. That means cheap. It also means we aren't sending a lot of data. That also means cheap. Cheap on space and cheap on sending data = very cheap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SEO optimization is sort of like a hidden black box. Search engines don’t publicly say all the ways they use to choose site rankings, but they tell us some of them and we get an impression of others. It's a likely case that sites with security warnings, suffer de-ranks, but it's unclear how severe those security issues have to be or how long.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 30 May 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/05/30/why-use-jekyll-to-create-a-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/30/why-use-jekyll-to-create-a-blog/</guid>
        
        <category>Jekyll</category>
        
        <category>StaticApp</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Why Create a Blog</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#professional-uses&quot; id=&quot;markdown-toc-professional-uses&quot;&gt;Professional Uses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#good-skills-measuring-stick&quot; id=&quot;markdown-toc-good-skills-measuring-stick&quot;&gt;Good Skills Measuring Stick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;When I first started developing I didn't see the point in a blog. But, when I started learning beyond the basics and troubleshooting through google, or checking out alternative techniques, I often ran into blogs for potential solutions and thought pieces. Most of the time, I wasn'nt receiving an expansive guide, or a lot of code, but they were almost always a great starting point.  A technical blog I often ran into in my early days was joshsoftware.com&lt;/p&gt;

&lt;p&gt;Even after running into technical blogs I figured these were just folks with years of experience; a blog is for someone in their fifth year programming who wants to give back to the community. Why should I extend the extra effort while I’m still learning? Could I even put out anything decent? There are already posts on polymorphic associates and guides, why would it be helpful if I wrote one?&lt;/p&gt;

&lt;h4 id=&quot;professional-uses&quot;&gt;Professional Uses&lt;/h4&gt;

&lt;p&gt;When I started exploring software positions, I began seeing preferences towards individuals with personal websites and blogs. Obviously an employer wants overachievers. Software posts often call for folks who enjoy programming in their offtime. We should maintain a good work life balance, but a great employee is involved in their work and does thinks about their field in their time off.&lt;/p&gt;

&lt;p&gt;A blog can also be a….&lt;/p&gt;

&lt;h4 id=&quot;good-skills-measuring-stick&quot;&gt;Good Skills Measuring Stick&lt;/h4&gt;

&lt;p&gt;A technical blog demonstrates a certain level of technical competence. If we start early enough and consistently a techincal blog can be an accurate measuring stick of skills. A sort of checkbox of abilities.&lt;/p&gt;

&lt;p&gt;It’s true what they say. You don’t really understand something unless you can explain it to someone else. So get out there and write posts on the concepts you already know, or even write out the concepts you don’t know to find your faults. Worst case scenario, if you want to review something, you can fall back on your own personal body of work and see it again in your own words.&lt;/p&gt;

&lt;p&gt;Everyone with a technical blog is just like you and me. They took the intiative at some point, and their skills grew with them to the extent that now we can all use their posts and a resource for our own growth.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 May 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2016/05/23/why-create-a-jekyll-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/23/why-create-a-jekyll-blog/</guid>
        
        <category>Jekyll</category>
        
        <category>JobPrep</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
  </channel>
</rss>
